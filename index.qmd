---
title: "Data Science for Public Policy"
subtitle: "Assignment 04: Data Visualization, Quarto, and Git"
author: "Juliette Taylor - jmt333, Thomas Tiberghien Alvarez - tt791"
format: 
  html:
    code-line-numbers: true
execute: 
  warning: false
urlcolor: blue
---

\vspace{0.1in}

```{r}
#| output: false
#| warning: false

library(tidyverse)
library(knitr)
library(lubridate)
library(purrr)
library(stringr)
library(scales)
library(tigris)
library(sf)
```

The function below is used to download the data zip files into csvs that are then ingested by R. Make sure that the period input is equivalent to the ones listed in https://s3.amazonaws.com/capitalbikeshare-data/index.html

```{r}
#| warning: false

#' Load cabi data
#'
#' @param period The period of time to load data for, as a string. Should match the zip files in the cabi website
#' @param zip_dir The directory into which zip files will be downloaded. Should be created before running the function
#' @param csv_dir The directory into which csv files will be generated. Should be created before running the function
#'
#' @return A tibble with all of the data downloaded from the CaBi website for that period
#' @examples load_cabi_data("2014")
load_cabi_data <- function(period, zip_dir = "data/", csv_dir = "csvs/") {
        url <- str_glue("https://s3.amazonaws.com/capitalbikeshare-data/{period}-capitalbikeshare-tripdata.zip")
        download.file(url, destfile = str_glue(paste0(zip_dir,"{period}-cabi-tripdata.zip")))
        Sys.sleep(0.5)
        zip_files <- paste0(zip_dir, list.files(zip_dir))
        for (x in zip_files) {
                unzip(x, exdir = csv_dir)
        }
        csv_files <- paste0(csv_dir, list.files(csv_dir, pattern = ".csv"))
        output <- bind_rows(map(csv_files, read_csv)) %>% janitor::clean_names()
        unlink(paste0(zip_dir,"*"), recursive = TRUE)
        unlink(paste0(csv_dir,"*"), recursive = TRUE)
        return(output)
}
```

# Plot 1: Ridership changes

The goal of this plot is to simply see how ridership has changed throughout the years since Capital Bikeshare got started.

### Obtaining the data

The challenge with this was to standardize the way in which the data came in, since different periods have different ways to save the data in the zip files. The main difference was that starting in 2018, the data is saved by month instead of by year.

```{r}
#| output: false
#| warning: false

#' Total monthly rides for years prior to 2018
#'
#' @param year The year as an int or double, for which monthly aggregate data needs to be obtained
#'
#' @return A tibble grouped by month of total monthly rides, with additional columns for the year and the period
#' @examples monthly_rides_pre2018(2012)
monthly_rides_pre2018 <- function(year) {
        output <- load_cabi_data(as.character(year)) %>% 
                group_by(month = month(start_date)) %>% 
                summarise(counts = n()) %>% 
                ungroup() %>% 
                mutate(year = year,
                       str_month = str_pad(month, 2, pad = "0")) %>% 
                mutate(period = paste0(year, str_month)) %>% 
                select(year, month, counts, period)
        return(output)
}
```

```{r}
#| output: false
#| warning: false
#' Total monthly rides for years starting 2018
#'
#' @param year The year as an int or double, for which monthly aggregate data needs to be obtained
#' @param month Optional list of months to use, since some years (namely 2022) are not yet complete
#'
#' @return A tibble grouped by month of total monthly rides, with additional columns for the year and the period
#' @example monthly_rides_post2018(2022, month = 1:9)
monthly_rides_post2018 <- function(year, month = 1:12) {
        monthly_data <- tibble(year = year, month = month, counts = integer(1)) %>% 
                mutate(str_month = str_pad(month, 2, pad = "0")) %>% 
                mutate(period = paste0(year, str_month)) %>% 
                select(-str_month)
        for (i in monthly_data$period) {
                data <- load_cabi_data(i)
                monthly_data <- monthly_data %>% 
                        mutate(counts = if_else(period == i, nrow(data), counts))
        }
        return(monthly_data)
}

```

### Putting the data together

The code below uses the previous functions to generate data for corresponding periods and then aggregates them together to get a single tibble with data from 2010 to 2022

```{r}
#| output: false
#| warning: false
monthly_2010_2017 <- bind_rows(map(2010:2017, monthly_rides_pre2018))
monthly_2018_2021 <- bind_rows(map(2018:2021, monthly_rides_post2018))
monthly_2022 <- monthly_rides_post2018(2022, month = 1:9)

monthly_data <- bind_rows(monthly_2010_2017, monthly_2018_2021, monthly_2022) 
```

The code below generates a monthly average by year in order to see the yearly trends more easily in the final plot

```{r}
#| output: false
#| warning: false
monthly_average_by_year <- monthly_data %>% 
        group_by(year) %>% 
        summarise(avg = mean(counts)) %>% 
        ungroup()
```

### Generating the plot

The code below generates the final plot

```{r}
#| warning: false
ggplot() + 
        geom_col(data = monthly_data, mapping = aes(x=ym(period), y=counts, colour = month)) +
        geom_line(data = monthly_average_by_year, 
                  mapping = aes(x = ym(paste0(year,"07")), y = avg), linetype = 5) +
        geom_point(data = monthly_average_by_year, 
                  mapping = aes(x = ym(paste0(year,"07")), y = avg), 
                  shape = 18, 
                  size = 2, 
                  colour = "aquamarine3") +
        theme_minimal() + 
        xlab("Year") + ylab("Trips per month") +
        scale_y_continuous(labels = comma) +
        scale_x_date(date_breaks = "1 year", date_labels = "%Y") + 
        labs(title = "Trips per month",
             subtitle = "With yearly averages of monthly trips",
             caption = "Data source: Capital Bikeshare")
        
```

### Interpretation


On first impression, the plot shows some trends that are obvious, such as telling us that the winters will have fewer rides, or that ridership has increased since 2010, when there were likely fewer stations and bikes to go around, and residents of Washington did not know about the availability of the Capital Bikeshare program. We can also see the dip in ridership in 2020 as Covid hit and people started staying inside more. Something that is surprising though, is that peak ridership was actually in 2017.


# Plot 2: Ridership throughout the day

### Obtaining the data

```{r}

data_sept_2022 <- load_cabi_data("202209") %>% janitor::clean_names()

minutes <- data_sept_2022 %>%
        group_by(hour = hour(started_at), minute = minute(started_at)) %>% 
        summarise(count = n()) %>% 
        ungroup() %>% 
        mutate(hour_minute = 60*hour+minute)
```

### Generating the plot

```{r}
ggplot(data = minutes) +
        geom_col(mapping = aes(x = hour, y = count), 
                 colour = "red") +
        coord_polar() + 
        labs(x= "Hours", y= "Count",
             title = "Bikes used over the course of 24 hours", 
             subtitle = "In September 2022",
             caption = "Data source: Capital Bikeshare")

```

### Intepretation 

This graph is relatively unsurprising in highlighting very low usage of bikes during the night, meaning between 10pm and 7am. Bike usage picks up considerably circa 7am, corresponding to human flows to work places or places of study. Usage then remains quite steady throughout the day until around 4pm when it starts to pick up significantly for rush hour. Peak times are without a doubt between 4pm and 7pm. Implications for policy may be ensuring any daily bike maintenance happens before these times. 


\newpage
# Plot 3: User types
The goal of this plot is to find how the type of user differs geographically throughout the city. In order to do this, we use the start station location and compare it with a map of Washington DC, colouring it based on which type of user uses it most. This analysis uses the data from August 2022.

### Obtaining the data
We need 2 different datasets here: one for the aggregated data by station, and one that has the geospatial data for DC.
```{r}
#| output: false
#| warning: false
station_data <- load_cabi_data("202208") %>% 
        filter(!is.na(start_station_id)) %>%
        group_by(station_id = start_station_id) %>% 
        summarise(num_member = sum(member_casual == "member"),
                  num_casual = sum(member_casual == "casual"),
                  station_name = first(start_station_name),
                  lat = first(start_lat),
                  long = first(start_lng)) %>% 
        ungroup() %>% 
        mutate(more_user_type = if_else(num_member > num_casual, "member", "casual")) %>% 
        st_as_sf(coords = c("long", "lat"), crs = "EPSG:4269")

dc_map <- states(cb = TRUE, progress_bar = FALSE) %>%
        filter(STUSPS == "DC")
```


### Generating the plot
The code below generates the final plot
```{r}
#| warning: false
ggplot() +
        geom_sf(data = dc_map) +
        geom_sf(data = station_data, 
                mapping = aes(colour = more_user_type, shape = more_user_type),
                size = 1.5) +
        theme_void() + 
        scale_shape_discrete(name = "User Type",
                              breaks = c("casual", "member"),
                              labels = c("Casual user", "CaBi member")) +
        scale_colour_discrete(name = "User Type",
                              breaks = c("casual", "member"),
                              labels = c("Casual user", "CaBi member")) +
        labs(title = "Stations in Washington DC by user type",
             subtitle = "With data from August 2022",
             caption = "Data sources: Capital Bikeshare, Tigris package")
        
```


### Interpretation
What is interesting about this plot is that member users, the ones who have a subscription to Capital Bikeshares and don't just pick up bikes on demand, make up the bulk of users in the downtown areas. It is only on the peripheries that casual users make up the majority of users. Maybe this has to do with how long the stations have been there. As CaBi expands outward, it takes a while for users to start using the bikes more consistently and seeing the value of getting a membership. Further analysis could also be done to see how often tourists use this service. If they are casual members then the downtown areas should see a few more casual-dominated stations, and this does seem to be the case around the Mall. 

\newpage
# Plot 4: Station usage
Top station was NA with 12,950 counts

```{r}
#| output: false
#| warning: false
#data_sept_2022 <- load_cabi_data("202209") %>% janitor::clean_names()
station_counts <- data_sept_2022 %>%
  filter(!is.na(start_station_id)) %>% 
  group_by(station_id = start_station_id) %>% 
  summarise(count = n()) %>% 
  arrange(desc(count)) %>%
  slice(1:10) %>%
  ungroup() 

top_ten <- station_counts$station_id
plot_data <- data_sept_2022 %>%
  filter(start_station_id == top_ten)

```

### Generating the plot

```{r}

ggplot(data = plot_data) +
  geom_bar(mapping = aes(y=start_station_name, fill=rideable_type),
           colour = "black") +
   scale_fill_discrete(name = "Bike Type",
                              breaks = c("classic_bike", "docked_bike", "electric_bike"),
                              labels = c("Classic", "Docked", "Electric")) +
  xlab("Count") + ylab("Station Name") +
  labs(title = "Top Ten Most Used Stations",
       subtitle = "September 2022",
       caption = "Data source: Capital Bikeshare")


```

### Interpretation 

Unsurprisingly, the top Capital Bikeshare stations correspond to areas of strategic importance in DC - transport hubs (Union Station), retail streets (M St), office buildings (Dupont Circle), and entertainment areas (14th St). It would be worth investigating whether these stations are consistently empty, in which case it might be worthwhile to add bikes to these particular locations. 
Interestingly, before filtering, the top station was NA with 12,950 counts. This, along with the lack of clarity around the meaning of docked bikes, poses questions about Capital Bikeshare's data set. 